name: Create Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Optional semver (e.g., 1.2.3 or v1.2.3). If omitted, the patch of the latest tag will be bumped."
        required: false
        type: string

permissions:
  contents: write

jobs:
  create-tag:
    name: Create and push tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "1319595+github-actions[bot]@users.noreply.github.com"

      - name: Determine new tag
        id: vars
        shell: bash
        run: |
          set -euo pipefail

          INPUT_VERSION="${{ github.event.inputs.version }}"

          semver_regex='^v?[0-9]+\.[0-9]+\.[0-9]+$'

          if [[ -n "$INPUT_VERSION" ]]; then
            if [[ ! "$INPUT_VERSION" =~ $semver_regex ]]; then
              echo "Provided version '$INPUT_VERSION' is not a valid semver (expected 1.2.3 or v1.2.3)." >&2
              exit 1
            fi
            NEW_TAG="$INPUT_VERSION"
          else
            # Get latest tag (if any)
            LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"

            if [[ -z "$LATEST_TAG" ]]; then
              # Start from 0.0.1 when no tags exist
              NEW_TAG="v0.0.1"
            else
              # Preserve optional 'v' prefix
              PREFIX=""
              CORE="$LATEST_TAG"
              if [[ "$LATEST_TAG" == v* ]]; then
                PREFIX="v"
                CORE="${LATEST_TAG#v}"
              fi

              IFS='.' read -r MAJOR MINOR PATCH <<< "$CORE"

              # Basic validation to ensure we parsed numbers
              if [[ -z "$MAJOR" || -z "$MINOR" || -z "$PATCH" ]]; then
                echo "Latest tag '$LATEST_TAG' is not in expected semver format." >&2
                exit 1
              fi

              PATCH=$((PATCH + 1))
              NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi

          echo "Computed new tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create annotated tag
        run: |
          TAG="${{ steps.vars.outputs.new_tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag '$TAG' already exists. Nothing to do." >&2
            exit 1
          fi
          git tag -a "$TAG" -m "Release $TAG"

      - name: Push tag
        run: |
          TAG="${{ steps.vars.outputs.new_tag }}"
          git push origin "$TAG"

      - name: Summary
        run: |
          echo "Created and pushed tag: ${{ steps.vars.outputs.new_tag }}"
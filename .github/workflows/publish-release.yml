name: Publish Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build binaries (${{ matrix.goos }}-${{ matrix.goarch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows/arm64 cross-compile is supported, but exclude if not desired
          # - goos: windows
          #   goarch: arm64
          []
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        run: |
          set -euo pipefail
          BIN_NAME=syncai
          OUT_DIR=dist
          mkdir -p "$OUT_DIR"
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags "-s -w" -o "$OUT_DIR/${BIN_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}$EXT" ./cmd

      - name: Archive
        run: |
          set -euo pipefail
          OUT_DIR=dist
          FILE_BASE=syncai_${{ matrix.goos }}_${{ matrix.goarch }}
          # Copy default config into dist so it can be included into archives
          cp syncai.json "$OUT_DIR/"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            # Include both the binary and the config file
            zip -j "$OUT_DIR/${FILE_BASE}.zip" "$OUT_DIR/${FILE_BASE}.exe" "$OUT_DIR/syncai.json"
            echo "ARCHIVE_PATH=$OUT_DIR/${FILE_BASE}.zip" >> $GITHUB_ENV
          else
            # Include both the binary and the config file
            tar -C "$OUT_DIR" -czf "$OUT_DIR/${FILE_BASE}.tar.gz" "${FILE_BASE}" "syncai.json"
            echo "ARCHIVE_PATH=$OUT_DIR/${FILE_BASE}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: syncai_${{ matrix.goos }}_${{ matrix.goarch }}
          path: ${{ env.ARCHIVE_PATH }}
          if-no-files-found: error

  release:
    name: Create GitHub Release and upload assets
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set node
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org/
          node-version: lts/*

      - name: Generate release notes with changelogithub
        run: npx changelogithub # or changelogithub@0.12 to ensure a stable result
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: syncai_*
          merge-multiple: true
          path: dist

      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.tar.gz
            dist/*.zip
            syncai.json
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}